## 优先队列 PriorityQueue

优先队列把优先级最高的元素设为链表的头节点，这样我们**获取或删除**优先级最高的元素只需要O(1)的时间复杂度，这么设计的代价就是**牺牲插入**的效率，每次插入一个新的元素时，我们都需要迭代链表，并找到合适的地方插入，这个时间复杂度往往是O(n)



## 堆 Heap

堆（Heap）是一种**完全二叉树**，堆中的节点满足以下的条件：一个节点的父节点优先级比自己高，而自己的子节点优先级比自己低。优先级可以根据数值的大小来决定。最常见的堆有以下两种类型：

- 最大堆（Max Heap）：最大堆中根节点数值最大，所有父节点的数值比各自的子节点数值大。（求最小K个数）
- 最小堆（Min Heap）：根节点数值最小， 父节点数值比其子节点数值小。（求最大K个数）

### 最大堆（Max Heap）

以下是最大堆支持的操作

- add: 将新元素插入堆
- poll: 将根节点（数值最大的元素）删除
- peek: 获取根节点的数值

在任何的时间点，最大堆都应该保持其特性：父节点的数值比所有子节点大。在插入新元素的时候，我们要遵循以下的步骤：

1. 在堆的最后新建一个节点。
2. 将数值赋予新节点。
3. 将其节点和父节点比较。
4. 如果新节点的数值比父节点大，调换父子节点的位置。
5. 重复步骤3和4直到最大堆的特性被满足。

==实现方式：Array==

虽然堆看起来非常像树，但是我们不用链表式的节点来实现。因为堆的特殊属性，我们可以直接使用数组来实现。